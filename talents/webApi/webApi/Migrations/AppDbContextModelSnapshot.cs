// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lib.dal;

namespace webApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lib.dto.Candidato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cidade")
                        .IsRequired();

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("link_crud")
                        .IsRequired();

                    b.Property<string>("linkedin");

                    b.Property<string>("nome")
                        .IsRequired();

                    b.Property<string>("nota_outros");

                    b.Property<string>("portifolio");

                    b.Property<double>("pretencao_salarial_hora");

                    b.Property<string>("skype")
                        .IsRequired();

                    b.Property<string>("telefone")
                        .IsRequired();

                    b.Property<string>("uf")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("candidato");
                });

            modelBuilder.Entity("lib.dto.CandidatoDisponibilidadeHoras", b =>
                {
                    b.Property<long>("CandidatoId");

                    b.Property<long>("DisponibilidadeHorasId");

                    b.HasKey("CandidatoId", "DisponibilidadeHorasId");

                    b.HasIndex("DisponibilidadeHorasId");

                    b.ToTable("cand_disp_Horas");
                });

            modelBuilder.Entity("lib.dto.CandidatoDisponibilidadePeriodo", b =>
                {
                    b.Property<long>("CandidatoId");

                    b.Property<long>("DisponibilidadePeriodoId");

                    b.HasKey("CandidatoId", "DisponibilidadePeriodoId");

                    b.HasIndex("DisponibilidadePeriodoId");

                    b.ToTable("cand_disp_periodo");
                });

            modelBuilder.Entity("lib.dto.CandidatoLinguagem", b =>
                {
                    b.Property<long>("CandidatoId");

                    b.Property<long>("LinguagemId");

                    b.Property<int>("Nota");

                    b.HasKey("CandidatoId", "LinguagemId");

                    b.HasIndex("LinguagemId");

                    b.ToTable("cand_linguagem");
                });

            modelBuilder.Entity("lib.dto.DisponibilidadeHoras", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("disp_horas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descricao = "Up to 4 hours per day / Até 4 horas por dia"
                        },
                        new
                        {
                            Id = 2L,
                            Descricao = "4 to 6 hours per day / De 4 á 6 horas por dia"
                        },
                        new
                        {
                            Id = 3L,
                            Descricao = "6 to 8 hours per day /De 6 á 8 horas por dia"
                        },
                        new
                        {
                            Id = 4L,
                            Descricao = "Up to 8 hours a day (are you sure?) / Acima de 8 horas por dia (tem certeza?"
                        },
                        new
                        {
                            Id = 5L,
                            Descricao = "Only weekends / Apenas finais de semana"
                        });
                });

            modelBuilder.Entity("lib.dto.DisponibilidadePeriodo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("disp_periodo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descricao = "Morning (from 08:00 to 12:00) / Manhã (de 08:00 ás 12:00)"
                        },
                        new
                        {
                            Id = 2L,
                            Descricao = "Afternoon (from 1:00 p.m. to 6:00 p.m.) / Tarde (de 13:00 ás 18:00)"
                        },
                        new
                        {
                            Id = 3L,
                            Descricao = "Night (7:00 p.m. to 10:00 p.m.) /Noite (de 19:00 as 22:00)"
                        },
                        new
                        {
                            Id = 4L,
                            Descricao = "Dawn (from 10 p.m. onwards) / Madrugada (de 22:00 em diante)"
                        },
                        new
                        {
                            Id = 5L,
                            Descricao = "Business (from 08:00 a.m. to 06:00 p.m.) / Comercial (de 08:00 as 18:00)"
                        });
                });

            modelBuilder.Entity("lib.dto.Linguagem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("linguagem");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "Ionic"
                        },
                        new
                        {
                            Id = 2L,
                            Nome = "ReactJS"
                        },
                        new
                        {
                            Id = 3L,
                            Nome = "React Native"
                        },
                        new
                        {
                            Id = 4L,
                            Nome = "Android"
                        },
                        new
                        {
                            Id = 5L,
                            Nome = "IOS"
                        },
                        new
                        {
                            Id = 6L,
                            Nome = "HTML"
                        },
                        new
                        {
                            Id = 7L,
                            Nome = "CSS"
                        },
                        new
                        {
                            Id = 8L,
                            Nome = "Bootstrap"
                        },
                        new
                        {
                            Id = 9L,
                            Nome = "Jquery"
                        },
                        new
                        {
                            Id = 10L,
                            Nome = "AngularJs 1.*"
                        },
                        new
                        {
                            Id = 11L,
                            Nome = "Angular"
                        },
                        new
                        {
                            Id = 12L,
                            Nome = "Java"
                        },
                        new
                        {
                            Id = 13L,
                            Nome = "Asp.Net MVC"
                        },
                        new
                        {
                            Id = 14L,
                            Nome = "Asp.Net WebForm"
                        },
                        new
                        {
                            Id = 15L,
                            Nome = "C"
                        },
                        new
                        {
                            Id = 16L,
                            Nome = "C#"
                        },
                        new
                        {
                            Id = 17L,
                            Nome = "NodeJS"
                        },
                        new
                        {
                            Id = 18L,
                            Nome = "Cake"
                        },
                        new
                        {
                            Id = 19L,
                            Nome = "Django"
                        },
                        new
                        {
                            Id = 20L,
                            Nome = "Majento"
                        },
                        new
                        {
                            Id = 21L,
                            Nome = "PHP"
                        },
                        new
                        {
                            Id = 22L,
                            Nome = "Vue"
                        },
                        new
                        {
                            Id = 23L,
                            Nome = "Wordpress"
                        },
                        new
                        {
                            Id = 24L,
                            Nome = "Phyton"
                        },
                        new
                        {
                            Id = 25L,
                            Nome = "Ruby"
                        },
                        new
                        {
                            Id = 26L,
                            Nome = "MS SQL Server"
                        },
                        new
                        {
                            Id = 27L,
                            Nome = "My SQL Server"
                        },
                        new
                        {
                            Id = 28L,
                            Nome = "Salesforce"
                        },
                        new
                        {
                            Id = 29L,
                            Nome = "Photoshop"
                        },
                        new
                        {
                            Id = 30L,
                            Nome = "Illustrator"
                        },
                        new
                        {
                            Id = 31L,
                            Nome = "SEO"
                        },
                        new
                        {
                            Id = 32L,
                            Nome = "Laravel"
                        });
                });

            modelBuilder.Entity("lib.dto.CandidatoDisponibilidadeHoras", b =>
                {
                    b.HasOne("lib.dto.Candidato", "candidato")
                        .WithMany("lstCandidatoDisponibilidadeHoras")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("lib.dto.DisponibilidadeHoras", "disponibilidadeHoras")
                        .WithMany()
                        .HasForeignKey("DisponibilidadeHorasId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lib.dto.CandidatoDisponibilidadePeriodo", b =>
                {
                    b.HasOne("lib.dto.Candidato", "candidato")
                        .WithMany("lstCandidatoDisponibilidadePeriodo")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("lib.dto.DisponibilidadePeriodo", "disponibilidadePeriodo")
                        .WithMany()
                        .HasForeignKey("DisponibilidadePeriodoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lib.dto.CandidatoLinguagem", b =>
                {
                    b.HasOne("lib.dto.Candidato", "candidato")
                        .WithMany("lstCandidatoLinguagem")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("lib.dto.Linguagem", "linguagem")
                        .WithMany()
                        .HasForeignKey("LinguagemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
